{"ast":null,"code":"var _jsxFileName = \"/Users/bpozniak/Desktop/UNIT3/project3/Project3_Calendar_FrontEnd/calendar/src/Day/index.js\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport './day.css';\nimport Appointment from '../Appointment';\nimport ReactModal from 'react-modal'; // import DayPicker from 'react-day-picker';\n// import DayPickerInput from 'react-day-picker/DayPickerInput';\n// import { DateUtils } from 'react-day-picker';\n// import dateFnsFormat from 'date-fns/format';\n// import dateFnsParse from 'date-fns/parse';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet baseUrl = 'http://localhost:3003'; //'https://proj3-calendar-frontend.herokuapp.com/;'\n\nexport default class Day extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOpenModal1 = () => {\n      this.setState({\n        showModal1: true\n      });\n    };\n\n    this.handleOpenModal2 = () => {\n      this.setState({\n        showModal2: true\n      });\n    };\n\n    this.handleOpenModal3 = () => {\n      this.setState({\n        showModal3: true\n      });\n    };\n\n    this.handleOpenModal4 = () => {\n      this.setState({\n        showModal4: true\n      });\n    };\n\n    this.handleOpenModal5 = () => {\n      this.setState({\n        showModal5: true\n      });\n    };\n\n    this.handleOpenModal6 = () => {\n      this.setState({\n        showModal6: true\n      });\n    };\n\n    this.handleOpenModal7 = () => {\n      this.setState({\n        showModal7: true\n      });\n    };\n\n    this.handleOpenModal8 = () => {\n      this.setState({\n        showModal8: true\n      });\n    };\n\n    this.toggleAvail = (setDay, slot) => {\n      console.log();\n      fetch(baseUrl + '/availAppt/' + setDay._id, {\n        method: 'PUT',\n        body: JSON.stringify({\n          [slot]: !setDay[slot]\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        } // credentials: \"include\"\n\n      }).then(res => res.json()).then(resJson => {\n        // console.log(resJson)\n        const copyDay = [...this.state.day];\n        const findIndex = this.state.day.findIndex(day => day._id === resJson._id); //checks copy against resJson{which = updated data} \n\n        copyDay[findIndex] = resJson;\n        this.setState({\n          //once updated set new array to \"current array\" in use (aka day)\n          day: copyDay\n        });\n      });\n    };\n\n    this.addDay = newDay => {\n      console.log('this.state.day[1].dayForAppts in addDay: ', this.state.day[1].dayForAppts);\n      console.log('addDay');\n      fetch(baseUrl + '/availAppt', {\n        method: 'POST',\n        body: JSON.stringify({\n          dayForAppts: newDay\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        } // credentials: \"include\"\n\n      }).then(res => res.json()).then(createdDate => {\n        const copyDay = [...this.state.day];\n        copyDay.push(createdDate);\n        this.setState({\n          day: copyDay,\n          selectedDateI: copyDay.length - 1\n        });\n      });\n    };\n\n    this.checkingDay = () => {\n      // console.log('checkingDay')\n      // console.log('this.state.day in checkingDay: ', typeof this.state.day)\n      //  console.log('this.state.day[1].dayForAppts in checkingDay: ', typeof this.state.day[1].dayForAppts)\n      // console.log('this.state.date in checkingDay', typeof this.state.date)\n      const dayDoesExistInDB = this.state.day.some(dateObj => {\n        return dateObj.dayForAppts === this.state.date;\n      });\n      console.log('dayDoesExist', dayDoesExistInDB); // this.state.day.forEach((checkDay) => {  \n      //   console.log('this.state.date in checkday: ', this.state.date)\n      //     console.log('checkday.dayForAppts: ',  checkDay.dayForAppts)\n\n      if (dayDoesExistInDB) {\n        //console.log('all good')\n        const foundIndex = this.state.day.findIndex(dayObj => {\n          return dayObj.dayForAppts === this.state.date;\n        });\n        this.setState({\n          selectedDateI: foundIndex\n        });\n      } else {\n        console.log('addDay');\n        this.addDay(this.state.date);\n      }\n    };\n\n    this.getDay = () => {\n      console.log('getDay'); // fetch to the backend\n\n      fetch(baseUrl + \"/availAppt\" // {\n      //   credentials: \"include\"\n      // }\n      ).then(res => {\n        if (res.status === 200) {\n          return res.json();\n        } else {\n          return [];\n        }\n      }).then(data => {\n        console.log('data in getDay: ', data);\n        this.setState({\n          day: data\n        });\n        console.log('this.state.day in getDay: ', this.state.day);\n        this.checkingDay();\n      }).then(console.log('this.state.day outside getDay: ', this.state.day));\n    };\n\n    this.state = {\n      showModal1: false,\n      showModal2: false,\n      showModal3: false,\n      showModal4: false,\n      showModal5: false,\n      showModal6: false,\n      showModal7: false,\n      showModal8: false,\n      day: [],\n      date: props.dateSelected.toLocaleDateString(),\n      selectedDateI: -1,\n      time: ''\n    }; //selectedDay: this.props.selectedDay\n    // this.handleOpenModal = this.handleOpenModal.bind(this);\n    // this.handleCloseModal = this.handleCloseModal.bind(this);\n  } // handleCloseModal = () => {\n  //   this.setState({ showModal: false }); \n  // }\n\n\n  componentDidMount() {\n    console.log('componentDidMount');\n    this.getDay();\n  }\n\n  render() {\n    // console.log('this.date: ', this.date)\n    console.log('this.props: ', this.props.dateSelected.toLocaleDateString());\n    let dayForAppts = this.props.dateSelected;\n    console.log('before:', dayForAppts);\n    dayForAppts = dayForAppts.toLocaleDateString();\n    console.log('after:', dayForAppts);\n    console.log('this.state.date: ', this.state.date);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" Available time slots for \", this.state.date, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                onClick: () => {\n                  this.toggleAvail(this.state.day[this.state.selectedDateI], \"availSlot1\", 1);\n                  this.handleOpenModal1();\n                },\n                className: this.state.selectedDateI > -1 && this.state.day[this.state.selectedDateI].availSlot1 ? null : 'notAvail',\n                children: [this.state.selectedDateI > -1 ? this.state.day[this.state.selectedDateI].availSlot1 ? \" 9am - available \" : \"time not available\" : \"refresh your page\", /*#__PURE__*/_jsxDEV(ReactModal, {\n                  isOpen: this.state.showModal1,\n                  children: /*#__PURE__*/_jsxDEV(Appointment, {\n                    date: this.state.date,\n                    time: '9am'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 236,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                onClick: () => {\n                  this.toggleAvail(this.state.day[this.state.selectedDateI], \"availSlot2\");\n                  this.handleOpenModal2();\n                },\n                className: this.state.selectedDateI > -1 && this.state.day[this.state.selectedDateI].availSlot2 ? null : 'notAvail',\n                children: [this.state.selectedDateI > -1 ? this.state.day[this.state.selectedDateI].availSlot2 ? \" 10am - available \" : \"time not available\" : \"refresh your page\", /*#__PURE__*/_jsxDEV(ReactModal, {\n                  isOpen: this.state.showModal2,\n                  children: /*#__PURE__*/_jsxDEV(Appointment, {\n                    date: this.state.date,\n                    time: '10am'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 254,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 252,\n                  columnNumber: 20\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                onClick: () => {\n                  this.toggleAvail(this.state.day[this.state.selectedDateI], \"availSlot3\");\n                  this.handleOpenModal3();\n                },\n                className: this.state.selectedDateI > -1 && this.state.day[this.state.selectedDateI].availSlot3 ? null : 'notAvail',\n                children: [this.state.selectedDateI > -1 ? this.state.day[this.state.selectedDateI].availSlot3 ? \" 11am - available \" : \"time not available\" : \"refresh your page\", /*#__PURE__*/_jsxDEV(ReactModal, {\n                  isOpen: this.state.showModal3,\n                  children: /*#__PURE__*/_jsxDEV(Appointment, {\n                    date: this.state.date,\n                    time: '11am'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 272,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 270,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                onClick: () => {\n                  this.toggleAvail(this.state.day[this.state.selectedDateI], \"availSlot4\");\n                  this.handleOpenModal4();\n                },\n                className: this.state.selectedDateI > -1 && this.state.day[this.state.selectedDateI].availSlot4 ? null : 'notAvail',\n                children: [this.state.selectedDateI > -1 ? this.state.day[this.state.selectedDateI].availSlot4 ? \" 1pm - available \" : \"time not available\" : \"refresh your page\", /*#__PURE__*/_jsxDEV(ReactModal, {\n                  isOpen: this.state.showModal4,\n                  children: /*#__PURE__*/_jsxDEV(Appointment, {\n                    date: this.state.date,\n                    time: '1pm'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 290,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 288,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                onClick: () => {\n                  this.toggleAvail(this.state.day[this.state.selectedDateI], \"availSlot5\");\n                  this.handleOpenModal5();\n                },\n                className: this.state.selectedDateI > -1 && this.state.day[this.state.selectedDateI].availSlot5 ? null : 'notAvail',\n                children: [this.state.selectedDateI > -1 ? this.state.day[this.state.selectedDateI].availSlot5 ? \" 2pm - available \" : \"time not available\" : \"refresh your page\", /*#__PURE__*/_jsxDEV(ReactModal, {\n                  isOpen: this.state.showModal5,\n                  children: /*#__PURE__*/_jsxDEV(Appointment, {\n                    date: this.state.date,\n                    time: '2pm'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 308,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 306,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                onClick: () => {\n                  this.toggleAvail(this.state.day[this.state.selectedDateI], \"availSlot6\");\n                  this.handleOpenModal6();\n                },\n                className: this.state.selectedDateI > -1 && this.state.day[this.state.selectedDateI].availSlot6 ? null : 'notAvail',\n                children: [this.state.selectedDateI > -1 ? this.state.day[this.state.selectedDateI].availSlot6 ? \" 3pm - available \" : \"time not available\" : \"refresh your page\", /*#__PURE__*/_jsxDEV(ReactModal, {\n                  isOpen: this.state.showModal6,\n                  children: /*#__PURE__*/_jsxDEV(Appointment, {\n                    date: this.state.date,\n                    time: '3pm'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 326,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 324,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                onClick: () => {\n                  this.toggleAvail(this.state.day[this.state.selectedDateI], \"availSlot7\");\n                  this.handleOpenModal7();\n                },\n                className: this.state.selectedDateI > -1 && this.state.day[this.state.selectedDateI].availSlot7 ? null : 'notAvail',\n                children: [this.state.selectedDateI > -1 ? this.state.day[this.state.selectedDateI].availSlot7 ? \" 4pm - available \" : \"time not available\" : \"refresh your page\", /*#__PURE__*/_jsxDEV(ReactModal, {\n                  isOpen: this.state.showModal7,\n                  children: /*#__PURE__*/_jsxDEV(Appointment, {\n                    date: this.state.date,\n                    time: '4pm'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 344,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 342,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                onClick: () => {\n                  this.toggleAvail(this.state.day[this.state.selectedDateI], \"availSlot8\");\n                  this.handleOpenModal8();\n                },\n                className: this.state.selectedDateI > -1 && this.state.day[this.state.selectedDateI].availSlot8 ? null : 'notAvail',\n                children: [this.state.selectedDateI > -1 ? this.state.day[this.state.selectedDateI].availSlot8 ? \" 5pm - available \" : \"time not available\" : \"refresh your page\", /*#__PURE__*/_jsxDEV(ReactModal, {\n                  isOpen: this.state.showModal8,\n                  children: /*#__PURE__*/_jsxDEV(Appointment, {\n                    date: this.state.date,\n                    time: '5pm'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 363,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 361,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 351,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this);\n  }\n\n} //<td onDoubleClick={() => this.toggleCelebrated(holiday)}\n//                             className={ holiday.celebrated ? 'celebrated' : null }>\n//                             { holiday.name }\n//                             </td>\n// <div>\n//             <table>\n//                 <tbody>\n//                     { \n//                     this.props.bookmarks.map((bookmark, i) => {\n//                         return (\n//                         <tr key={i}>\n//                            \n//                             <td> {availAppt.time} </td>\n//                             <td> {bookmark.description} </td>\n//                             <td onClick={() => this.props.deleteBookmark(bookmark._id)}>(DELETE)\n//                             </td> \n//                             <td onClick={() => {this.showEditForm(bookmark)} } onChange={this.handleChange}>  Show Edit Form\n//                             {\n//                                 this.state.modalOpen \n//                                 &&\n//                                 <div>\n//                                 <form onSubmit={(e)=>{ this.props.handleSubmit(e, bookmark._id, this.state.updatedTitle, this.state.updatedUrl, this.state.updatedDes)} }>\n//                                 <label>Title: </label>\n//                                 <input type='text' id='title' name=\"updatedTitle\"  onChange={this.handleChange} />\n//                                 <label>Description: </label>\n//                                 <input type='text' id='title' name=\"updatedDes\"  onChange={this.handleChange} />\n//                                 <label>Url: </label>\n//                                 <input type='text' id='title' name=\"updatedUrl\"  onChange={this.handleChange} />\n//                                 <input type=\"submit\" value=\"Edit\" />\n//                                 </form>\n//                                 </div>\n//                             }\n//                             </td>\n//                         </tr>\n//                     )})\n//                         }\n//                 </tbody>\n//             </table>\n//             <button onClick={this.closeModal} > Close Form</button>\n//         </div>","map":{"version":3,"sources":["/Users/bpozniak/Desktop/UNIT3/project3/Project3_Calendar_FrontEnd/calendar/src/Day/index.js"],"names":["React","Component","moment","Appointment","ReactModal","baseUrl","Day","constructor","props","handleOpenModal1","setState","showModal1","handleOpenModal2","showModal2","handleOpenModal3","showModal3","handleOpenModal4","showModal4","handleOpenModal5","showModal5","handleOpenModal6","showModal6","handleOpenModal7","showModal7","handleOpenModal8","showModal8","toggleAvail","setDay","slot","console","log","fetch","_id","method","body","JSON","stringify","headers","then","res","json","resJson","copyDay","state","day","findIndex","addDay","newDay","dayForAppts","createdDate","push","selectedDateI","length","checkingDay","dayDoesExistInDB","some","dateObj","date","foundIndex","dayObj","getDay","status","data","dateSelected","toLocaleDateString","time","componentDidMount","render","availSlot1","availSlot2","availSlot3","availSlot4","availSlot5","availSlot6","availSlot7","availSlot8"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport moment from 'moment';\nimport './day.css';\nimport Appointment from '../Appointment'\nimport ReactModal from 'react-modal';\n// import DayPicker from 'react-day-picker';\n// import DayPickerInput from 'react-day-picker/DayPickerInput';\n// import { DateUtils } from 'react-day-picker';\n// import dateFnsFormat from 'date-fns/format';\n// import dateFnsParse from 'date-fns/parse';\n\n\n\n\n\nlet baseUrl = 'http://localhost:3003';\n//'https://proj3-calendar-frontend.herokuapp.com/;'\n\n\nexport default class Day extends React.Component {\n      \n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n          showModal1: false,\n          showModal2: false,\n          showModal3: false,\n          showModal4: false,\n          showModal5: false,\n          showModal6: false,\n          showModal7: false,\n          showModal8: false,\n\n          day: [],\n          date: props.dateSelected.toLocaleDateString(),\n          selectedDateI: -1,\n          time: '',\n          \n        }\n        //selectedDay: this.props.selectedDay\n        // this.handleOpenModal = this.handleOpenModal.bind(this);\n        // this.handleCloseModal = this.handleCloseModal.bind(this);\n\n    }\n    \n    // handleCloseModal = () => {\n    //   this.setState({ showModal: false }); \n    // }\n\n    handleOpenModal1 = () => {\n      this.setState({ showModal1: true})\n    }\n    handleOpenModal2 = () => {\n      this.setState({ showModal2: true})\n    }\n    handleOpenModal3 = () => {\n      this.setState({ showModal3: true})\n    }\n    handleOpenModal4 = () => {\n      this.setState({ showModal4: true})\n    }\n    handleOpenModal5 = () => {\n      this.setState({ showModal5: true})\n    }\n    handleOpenModal6 = () => {\n      this.setState({ showModal6: true})\n    }\n    handleOpenModal7 = () => {\n      this.setState({ showModal7: true})\n    }\n    handleOpenModal8 = () => {\n      this.setState({ showModal8: true})\n    }\n\n\n\n    toggleAvail = (setDay, slot ) => {\n      console.log()\n        fetch(baseUrl + '/availAppt/' + setDay._id, {\n          method: 'PUT',\n          body: JSON.stringify({[slot] : !setDay[slot]}),\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          // credentials: \"include\"\n        }).then(res => res.json())\n        .then(resJson => {\n          // console.log(resJson)\n          const copyDay = [...this.state.day]\n          const findIndex = this.state.day.findIndex(\n            day => day._id === resJson._id)\n            //checks copy against resJson{which = updated data} \n          copyDay[findIndex] = resJson\n          this.setState({\n            //once updated set new array to \"current array\" in use (aka day)\n            day: copyDay,\n            \n            \n          })\n        })\n    }\n  \n\n  addDay = (newDay) => {\n    \n    console.log('this.state.day[1].dayForAppts in addDay: ', this.state.day[1].dayForAppts)\n   \n    console.log('addDay') \n    \n    fetch(baseUrl + '/availAppt', {\n    method: 'POST',\n    body: JSON.stringify({\n      dayForAppts: newDay\n    }),\n    headers: {\n      'Content-Type' : 'application/json'\n    },\n    // credentials: \"include\"\n    }).then( res => res.json())\n    .then(createdDate => {\n      const copyDay = [...this.state.day]\n      copyDay.push(createdDate)\n      this.setState({\n        day: copyDay,\n        selectedDateI: copyDay.length - 1\n      })\n    })\n  }\n    \n\n  checkingDay = () => {\n    // console.log('checkingDay')\n    // console.log('this.state.day in checkingDay: ', typeof this.state.day)\n    //  console.log('this.state.day[1].dayForAppts in checkingDay: ', typeof this.state.day[1].dayForAppts)\n    // console.log('this.state.date in checkingDay', typeof this.state.date)\n    const dayDoesExistInDB = this.state.day.some((dateObj)=> {\n      return dateObj.dayForAppts === this.state.date\n    })\n    console.log('dayDoesExist', dayDoesExistInDB)\n\n    // this.state.day.forEach((checkDay) => {  \n    //   console.log('this.state.date in checkday: ', this.state.date)\n    //     console.log('checkday.dayForAppts: ',  checkDay.dayForAppts)\n\n      if (dayDoesExistInDB) { \n          //console.log('all good')\n          const foundIndex = this.state.day.findIndex((dayObj)=> {\n            return dayObj.dayForAppts === this.state.date \n          })\n          this.setState({ \n            selectedDateI: foundIndex\n          })\n      } else {\n        console.log('addDay')\n        this.addDay(this.state.date)\n      } \n    }\n   \n\n\n\n  getDay = () => {\n    console.log('getDay')\n    // fetch to the backend\n    fetch(baseUrl + \"/availAppt\", \n    // {\n    //   credentials: \"include\"\n    // }\n    )\n    .then(res => {\n      if(res.status === 200) {\n        return res.json()\n      } else {\n        return []\n      }\n    }).then(data => {\n      console.log('data in getDay: ', data)\n      this.setState({ day: data })\n      console.log('this.state.day in getDay: ', this.state.day)\n      this.checkingDay()\n    }).then(console.log('this.state.day outside getDay: ', this.state.day))\n  }\n\n\n\n\n  componentDidMount() {\n    console.log('componentDidMount')\n    this.getDay()\n  }\n\n\n  \n    render () {\n\n\n      // console.log('this.date: ', this.date)\n      console.log('this.props: ', this.props.dateSelected.toLocaleDateString())\n      let dayForAppts = this.props.dateSelected\n      console.log('before:', dayForAppts)\n      dayForAppts = dayForAppts.toLocaleDateString();\n      console.log('after:', dayForAppts)\n      console.log('this.state.date: ', this.state.date)\n\n\n\n\n\n    return (\n      <div>\n        <p> Available time slots for {this.state.date} </p>\n        \n       \n        \n        <div>\n          <table >\n          \n            <tbody>\n              \n                  <tr >\n                    \n                      <td onClick={()=> {this.toggleAvail(this.state.day[this.state.selectedDateI], \"availSlot1\" , 1); this.handleOpenModal1();}}\n                     className={this.state.selectedDateI > -1 && this.state.day[this.state.selectedDateI].availSlot1 ? null : 'notAvail' }>\n                      {\n                          (this.state.selectedDateI > -1 )\n                          ? (this.state.day[this.state.selectedDateI].availSlot1)\n                            ? \" 9am - available \"\n                            : \"time not available\"\n                          : \"refresh your page\"\n                      } \n                      \n                      <ReactModal \n                          isOpen={this.state.showModal1}>\n                          <Appointment date={this.state.date} time={'9am'}/>\n                      </ReactModal>\n                      </td>\n                  </tr>\n\n                  <tr >\n                    \n                  <td onClick={()=> {this.toggleAvail(this.state.day[this.state.selectedDateI], \"availSlot2\"); this.handleOpenModal2(); }}\n                     className={this.state.selectedDateI > -1 && this.state.day[this.state.selectedDateI].availSlot2 ? null : 'notAvail' }>\n                      {\n                          (this.state.selectedDateI > -1 )\n                          ? (this.state.day[this.state.selectedDateI].availSlot2)\n                            ? \" 10am - available \"\n                            : \"time not available\"\n                          : \"refresh your page\"\n                      } \n                   <ReactModal \n                          isOpen={this.state.showModal2}>\n                          <Appointment date={this.state.date} time={'10am'}/>\n                    </ReactModal>\n                    </td>\n                  </tr>\n\n                  <tr >\n                    \n                  <td onClick={()=> {this.toggleAvail(this.state.day[this.state.selectedDateI], \"availSlot3\"); this.handleOpenModal3(); }}\n                     className={this.state.selectedDateI > -1 && this.state.day[this.state.selectedDateI].availSlot3 ? null : 'notAvail' }>\n                      {\n                          (this.state.selectedDateI > -1 )\n                          ? (this.state.day[this.state.selectedDateI].availSlot3)\n                            ? \" 11am - available \"\n                            : \"time not available\"\n                          : \"refresh your page\"\n                      } \n                      <ReactModal \n                          isOpen={this.state.showModal3}>\n                          <Appointment date={this.state.date} time={'11am'}/>\n                      </ReactModal>\n                      </td>\n                  </tr>\n\n                  <tr >\n                    \n                  <td onClick={()=> {this.toggleAvail(this.state.day[this.state.selectedDateI], \"availSlot4\"); this.handleOpenModal4(); }}\n                     className={this.state.selectedDateI > -1 && this.state.day[this.state.selectedDateI].availSlot4 ? null : 'notAvail' }>\n                      {\n                          (this.state.selectedDateI > -1 )\n                          ? (this.state.day[this.state.selectedDateI].availSlot4)\n                            ? \" 1pm - available \"\n                            : \"time not available\"\n                          : \"refresh your page\"\n                      } \n                      <ReactModal \n                          isOpen={this.state.showModal4}>\n                          <Appointment date={this.state.date} time={'1pm'}/>\n                      </ReactModal>\n                      </td>\n                  </tr>\n\n                  <tr >\n                    \n                      <td onClick={()=> {this.toggleAvail(this.state.day[this.state.selectedDateI], \"availSlot5\"); this.handleOpenModal5(); }}\n                     className={this.state.selectedDateI > -1 && this.state.day[this.state.selectedDateI].availSlot5 ? null : 'notAvail' }>\n                      {\n                          (this.state.selectedDateI > -1 )\n                          ? (this.state.day[this.state.selectedDateI].availSlot5)\n                            ? \" 2pm - available \"\n                            : \"time not available\"\n                          : \"refresh your page\"\n                      } \n                      <ReactModal \n                          isOpen={this.state.showModal5}>\n                          <Appointment date={this.state.date} time={'2pm'}/>\n                      </ReactModal>\n                      </td>\n                  </tr>\n\n                  <tr >\n                    \n                  <td onClick={()=> {this.toggleAvail(this.state.day[this.state.selectedDateI], \"availSlot6\"); this.handleOpenModal6();}}\n                     className={this.state.selectedDateI > -1 && this.state.day[this.state.selectedDateI].availSlot6 ? null : 'notAvail' }>\n                      {\n                          (this.state.selectedDateI > -1 )\n                          ? (this.state.day[this.state.selectedDateI].availSlot6)\n                            ? \" 3pm - available \"\n                            : \"time not available\"\n                          : \"refresh your page\"\n                      } \n                      <ReactModal \n                          isOpen={this.state.showModal6}>\n                          <Appointment date={this.state.date} time={'3pm'}/>\n                      </ReactModal>\n                      </td>\n                    </tr>\n\n                  <tr >\n                    \n                    <td onClick={()=> {this.toggleAvail(this.state.day[this.state.selectedDateI], \"availSlot7\"); this.handleOpenModal7(); }}\n                      className={this.state.selectedDateI > -1 && this.state.day[this.state.selectedDateI].availSlot7 ? null : 'notAvail' }>\n                        {\n                            (this.state.selectedDateI > -1 )\n                            ? (this.state.day[this.state.selectedDateI].availSlot7)\n                              ? \" 4pm - available \"\n                              : \"time not available\"\n                            : \"refresh your page\"\n                        } \n                      <ReactModal \n                          isOpen={this.state.showModal7}>\n                          <Appointment date={this.state.date} time={'4pm'}/>\n                      </ReactModal>\n                      </td>\n                    </tr>\n\n                  <tr >\n                    \n                      <td onClick={()=> {this.toggleAvail(this.state.day[this.state.selectedDateI], \"availSlot8\"); this.handleOpenModal8(); }}\n                      className={this.state.selectedDateI > -1 && this.state.day[this.state.selectedDateI].availSlot8 ? null : 'notAvail' }>\n                      {\n                          (this.state.selectedDateI > -1 )\n                          ? (this.state.day[this.state.selectedDateI].availSlot8)\n                            ? \" 5pm - available \"\n                            : \"time not available\"\n                          : \"refresh your page\"\n                      }\n\n                      <ReactModal \n                        isOpen={this.state.showModal8}>\n                        <Appointment date={this.state.date} time={'5pm'}/>\n                      </ReactModal>\n                      </td>\n                    </tr>\n            </tbody>\n          \n\n           \n        </table>\n\n        </div>\n\n        \n        <div>\n          \n        </div>\n      </div>\n    );}\n}\n\n\n\n\n//<td onDoubleClick={() => this.toggleCelebrated(holiday)}\n//                             className={ holiday.celebrated ? 'celebrated' : null }>\n//                             { holiday.name }\n//                             </td>\n\n\n\n\n\n// <div>\n//             <table>\n//                 <tbody>\n//                     { \n//                     this.props.bookmarks.map((bookmark, i) => {\n//                         return (\n\n//                         <tr key={i}>\n//                            \n\n//                             <td> {availAppt.time} </td>\n                            \n//                             <td> {bookmark.description} </td>\n\n\n//                             <td onClick={() => this.props.deleteBookmark(bookmark._id)}>(DELETE)\n//                             </td> \n\n//                             <td onClick={() => {this.showEditForm(bookmark)} } onChange={this.handleChange}>  Show Edit Form\n                           \n//                             {\n//                                 this.state.modalOpen \n\n//                                 &&\n//                                 <div>\n//                                 <form onSubmit={(e)=>{ this.props.handleSubmit(e, bookmark._id, this.state.updatedTitle, this.state.updatedUrl, this.state.updatedDes)} }>\n\n//                                 <label>Title: </label>\n//                                 <input type='text' id='title' name=\"updatedTitle\"  onChange={this.handleChange} />\n\n//                                 <label>Description: </label>\n//                                 <input type='text' id='title' name=\"updatedDes\"  onChange={this.handleChange} />\n\n                            \n//                                 <label>Url: </label>\n//                                 <input type='text' id='title' name=\"updatedUrl\"  onChange={this.handleChange} />\n\n\n//                                 <input type=\"submit\" value=\"Edit\" />\n\n//                                 </form>\n//                                 </div>\n                                \n//                             }\n                            \n//                             </td>\n//                         </tr>\n                         \n//                     )})\n                    \n//                         }\n//                 </tbody>\n//             </table>\n//             <button onClick={this.closeModal} > Close Form</button>\n//         </div>"]},"metadata":{},"sourceType":"module"}