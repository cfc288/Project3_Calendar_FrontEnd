[{"/Users/bpozniak/Desktop/UNIT3/project3/Project3_Calendar_FrontEnd/calendar/src/index.js":"1","/Users/bpozniak/Desktop/UNIT3/project3/Project3_Calendar_FrontEnd/calendar/src/App.js":"2","/Users/bpozniak/Desktop/UNIT3/project3/Project3_Calendar_FrontEnd/calendar/src/reportWebVitals.js":"3","/Users/bpozniak/Desktop/UNIT3/project3/Project3_Calendar_FrontEnd/calendar/src/DayPicker/index.js":"4","/Users/bpozniak/Desktop/UNIT3/project3/Project3_Calendar_FrontEnd/calendar/src/Day/index.js":"5","/Users/bpozniak/Desktop/UNIT3/project3/Project3_Calendar_FrontEnd/calendar/src/Appointment/index.js":"6"},{"size":502,"mtime":1635518241544,"results":"7","hashOfConfig":"8"},{"size":4432,"mtime":1635541853210,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1635518241544,"results":"10","hashOfConfig":"8"},{"size":2291,"mtime":1635532534593,"results":"11","hashOfConfig":"8"},{"size":15693,"mtime":1635544232752,"results":"12","hashOfConfig":"8"},{"size":2894,"mtime":1635548383501,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1cdue2u",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/bpozniak/Desktop/UNIT3/project3/Project3_Calendar_FrontEnd/calendar/src/index.js",[],"/Users/bpozniak/Desktop/UNIT3/project3/Project3_Calendar_FrontEnd/calendar/src/App.js",["28","29","30","31","32"],"import './App.css';\nimport React, { Component } from 'react';\nimport ReactDOM from \"react-dom\";\n// import Calendar from \"./Calendar\";\n// import Day from \"./Day\";\nimport ReactModal from 'react-modal';\n// import DayPicker from 'react-day-picker';\nimport Calendar from \"./DayPicker\"\nimport img from \"./img/tatgun1.png\"\nimport img2 from \"./img/tatgun2.png\"\nimport img3 from \"./img/shop2.png\"\n\nconst modalStyle = {\n  backgroundImage:\"url(\" + img3 + \")\",\n}\n\nlet baseUrl = 'https://proj3-calendar-frontend.herokuapp.com/;'\n// 'http://localhost:3003';\n\n\nconst style = {\n  position: \"relative\",\n  margin: \"50px auto\"\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      firstName: '',\n      lastName: '',\n      month: '',\n      day: '',\n      year: '',\n      time: '',\n      showModal: false,\n      userLoggedIn: false,\n      admin: false,\n    }\n\n    this.handleOpenModal = this.handleOpenModal.bind(this);\n    this.handleCloseModal = this.handleCloseModal.bind(this);\n\n} \n\n\nhandleOpenModal () {\n  this.setState({ showModal: true });\n}\nhandleCloseModal () {\n  this.setState({ showModal: false });\n}\n\n\n//  onDayClick1 = (e, day) => {\n//    console.log('appjs onDayClick')\n   \n// }\n\n\n\n// loginUser = async (e) => {\n//     console.log('loginUser')\n//     e.preventDefault()\n//     const url = baseUrl + '/users/login'\n//     const loginBody = {\n//       username: e.target.username.value,\n//       password: e.target.password.value\n//     }\n//     try {\n\n//       const response = await fetch(url, {\n//         method: 'POST',\n//         body: JSON.stringify(loginBody),\n//         headers: {\n//           'Content-Type': 'application/json'\n//         },\n//         credentials: \"include\"\n//       })\n\n//       console.log(response)\n//       console.log(\"BODY: \",response.body)\n\n//       if (response.status === 200) {\n//         this.getAppointment()\n//       }\n//     }\n//     catch (err) {\n//       console.log('Error => ', err);\n//     }\n//   }\n\n//   register = async (e) => {\n//     e.preventDefault()\n//     const url = baseUrl + '/users/signup'\n//     try {\n//       const response = await fetch(url, {\n//         method: 'POST',\n//         body: JSON.stringify({\n//           username: e.target.username.value,\n//           password: e.target.password.value\n//         }),\n//         headers: {\n//           'Content-Type': 'application/json'\n//         }\n//       })\n//       if (response.status === 200) {\n//         this.getAppointment()\n//       }\n//     }\n//     catch (err) {\n//       console.log('Error => ', err);\n//     }\n//   }\n\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n        \n        <div className=\"Title\">\n          <h1>\n          <img class=\"tattooGun\" src={img2}></img>\n          React Trio Tattoos\n          <img class=\"tattooGun\" src={img}></img>\n          </h1>\n          <div className=\"aboutUsModal\">\n            <div id=\"aboutUs\" onClick={this.handleOpenModal}>About Us</div>\n               <div className=\"modalAbout\">\n                <ReactModal \n                   isOpen={this.state.showModal}>\n                   <div className=\"insideAboutModal\" style={modalStyle}>\n\n                   <h2 className=\"aboutUsHead\">Welcome to React Trio Tattoos!</h2>\n                  <p className=\"aboutUsPar1\">We thank you for your interest in our artwork and getting tattooed. Our artist is experienced and can assist with tattooing, whether it's your first tattoo or already have several, and can also assist with solutions for bad tattoos. </p>\n\n                   <p className=\"aboutUsPar2\"> Our goal is to provide you with a professional artistic tattoo within our sterilized and comfortable environment. We want you to feel welcome and relaxed, while also providing humor and positive atmosphere for an enjoyable experience.</p>\n\n                    <p className=\"aboutUsPar3\"> Feel free to give us a call or use our calendar to schedule an appointment for a memorable experience in creating a lifetime memory!</p>\n\n                  <button className=\"aboutButton\" onClick={this.handleCloseModal}>Home</button>\n                    </div>\n                </ReactModal>\n              </div>\n            </div>\n        </div>\n        \n        <div className=\"App\">\n        <Calendar \n          onDayClick1={(e, day)=> this.onDayClick1(e, day)}/>  \n        \n        </div>   \n\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n//style={style} width=\"302px\" ","/Users/bpozniak/Desktop/UNIT3/project3/Project3_Calendar_FrontEnd/calendar/src/reportWebVitals.js",[],"/Users/bpozniak/Desktop/UNIT3/project3/Project3_Calendar_FrontEnd/calendar/src/DayPicker/index.js",[],"/Users/bpozniak/Desktop/UNIT3/project3/Project3_Calendar_FrontEnd/calendar/src/Day/index.js",["33","34"],"import React, { Component } from 'react';\nimport moment from 'moment';\nimport './day.css';\nimport Appointment from '../Appointment'\nimport ReactModal from 'react-modal';\n// import DayPicker from 'react-day-picker';\n// import DayPickerInput from 'react-day-picker/DayPickerInput';\n// import { DateUtils } from 'react-day-picker';\n// import dateFnsFormat from 'date-fns/format';\n// import dateFnsParse from 'date-fns/parse';\n\n\n\n\n\nlet baseUrl = 'http://localhost:3003';\n//'https://proj3-calendar-frontend.herokuapp.com/;'\n\n\nexport default class Day extends React.Component {\n      \n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n          showModal1: false,\n          showModal2: false,\n          showModal3: false,\n          showModal4: false,\n          showModal5: false,\n          showModal6: false,\n          showModal7: false,\n          showModal8: false,\n\n          day: [],\n          date: props.dateSelected.toLocaleDateString(),\n          selectedDateI: -1,\n          time: '',\n          \n        }\n        //selectedDay: this.props.selectedDay\n        // this.handleOpenModal = this.handleOpenModal.bind(this);\n        // this.handleCloseModal = this.handleCloseModal.bind(this);\n\n    }\n    \n    // handleCloseModal = () => {\n    //   this.setState({ showModal: false }); \n    // }\n\n    handleOpenModal1 = () => {\n      this.setState({ showModal1: true})\n    }\n    handleOpenModal2 = () => {\n      this.setState({ showModal2: true})\n    }\n    handleOpenModal3 = () => {\n      this.setState({ showModal3: true})\n    }\n    handleOpenModal4 = () => {\n      this.setState({ showModal4: true})\n    }\n    handleOpenModal5 = () => {\n      this.setState({ showModal5: true})\n    }\n    handleOpenModal6 = () => {\n      this.setState({ showModal6: true})\n    }\n    handleOpenModal7 = () => {\n      this.setState({ showModal7: true})\n    }\n    handleOpenModal8 = () => {\n      this.setState({ showModal8: true})\n    }\n\n\n\n    toggleAvail = (setDay, slot ) => {\n      console.log()\n        fetch(baseUrl + '/availAppt/' + setDay._id, {\n          method: 'PUT',\n          body: JSON.stringify({[slot] : !setDay[slot]}),\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          // credentials: \"include\"\n        }).then(res => res.json())\n        .then(resJson => {\n          // console.log(resJson)\n          const copyDay = [...this.state.day]\n          const findIndex = this.state.day.findIndex(\n            day => day._id === resJson._id)\n            //checks copy against resJson{which = updated data} \n          copyDay[findIndex] = resJson\n          this.setState({\n            //once updated set new array to \"current array\" in use (aka day)\n            day: copyDay,\n            \n            \n          })\n        })\n    }\n  \n\n  addDay = (newDay) => {\n    \n    // console.log('this.state.day[1].dayForAppts in addDay: ', this.state.day[1].dayForAppts)\n   \n    console.log('addDay') \n    \n    fetch(baseUrl + '/availAppt', {\n    method: 'POST',\n    body: JSON.stringify({\n      dayForAppts: newDay\n    }),\n    headers: {\n      'Content-Type' : 'application/json'\n    },\n    // credentials: \"include\"\n    }).then( res => res.json())\n    .then(createdDate => {\n      const copyDay = [...this.state.day]\n      copyDay.push(createdDate)\n      this.setState({\n        day: copyDay,\n        selectedDateI: copyDay.length - 1\n      })\n    })\n  }\n    \n\n  checkingDay = () => {\n    // console.log('checkingDay')\n    // console.log('this.state.day in checkingDay: ', typeof this.state.day)\n    //  console.log('this.state.day[1].dayForAppts in checkingDay: ', typeof this.state.day[1].dayForAppts)\n    // console.log('this.state.date in checkingDay', typeof this.state.date)\n    const dayDoesExistInDB = this.state.day.some((dateObj)=> {\n      return dateObj.dayForAppts === this.state.date\n    })\n    console.log('dayDoesExist', dayDoesExistInDB)\n\n    // this.state.day.forEach((checkDay) => {  \n    //   console.log('this.state.date in checkday: ', this.state.date)\n    //     console.log('checkday.dayForAppts: ',  checkDay.dayForAppts)\n\n      if (dayDoesExistInDB) { \n          //console.log('all good')\n          const foundIndex = this.state.day.findIndex((dayObj)=> {\n            return dayObj.dayForAppts === this.state.date \n          })\n          this.setState({ \n            selectedDateI: foundIndex\n          })\n      } else {\n        console.log('addDay')\n        this.addDay(this.state.date)\n      } \n    }\n   \n\n\n\n  getDay = () => {\n    console.log('getDay')\n    // fetch to the backend\n    fetch(baseUrl + \"/availAppt\", \n    // {\n    //   credentials: \"include\"\n    // }\n    )\n    .then(res => {\n      if(res.status === 200) {\n        return res.json()\n      } else {\n        return []\n      }\n    }).then(data => {\n      console.log('data in getDay: ', data)\n      this.setState({ day: data })\n      console.log('this.state.day in getDay: ', this.state.day)\n      this.checkingDay()\n    }).then(console.log('this.state.day outside getDay: ', this.state.day))\n  }\n\n\n\n\n  componentDidMount() {\n    console.log('componentDidMount')\n    this.getDay()\n  }\n\n\n  \n    render () {\n\n\n      // console.log('this.date: ', this.date)\n      console.log('this.props: ', this.props.dateSelected.toLocaleDateString())\n      let dayForAppts = this.props.dateSelected\n      console.log('before:', dayForAppts)\n      dayForAppts = dayForAppts.toLocaleDateString();\n      console.log('after:', dayForAppts)\n      console.log('this.state.date: ', this.state.date)\n\n\n    return (\n      <div>\n        <p> Available time slots for {this.state.date} </p>\n        \n      \n        <div>\n          <table >\n          \n            <tbody>\n              \n                  <tr >\n                    \n                      <td onClick={()=> {this.toggleAvail(this.state.day[this.state.selectedDateI], \"availSlot1\" , 1); this.handleOpenModal1();}}\n                     className={this.state.selectedDateI > -1 && this.state.day[this.state.selectedDateI].availSlot1 ? null : 'notAvail' }>\n                      {\n                          (this.state.selectedDateI > -1 )\n                          ? (this.state.day[this.state.selectedDateI].availSlot1)\n                            ? \" 9am - available \"\n                            : \"time not available\"\n                          : \"refresh your page\"\n                      } \n                      \n                      <ReactModal \n                          isOpen={this.state.showModal1}>\n                          <Appointment date={this.state.date} time={'9am'}/>\n                      </ReactModal>\n                      </td>\n                  </tr>\n\n                  <tr >\n                    \n                  <td onClick={()=> {this.toggleAvail(this.state.day[this.state.selectedDateI], \"availSlot2\"); this.handleOpenModal2(); }}\n                     className={this.state.selectedDateI > -1 && this.state.day[this.state.selectedDateI].availSlot2 ? null : 'notAvail' }>\n                      {\n                          (this.state.selectedDateI > -1 )\n                          ? (this.state.day[this.state.selectedDateI].availSlot2)\n                            ? \" 10am - available \"\n                            : \"time not available\"\n                          : \"refresh your page\"\n                      } \n                   <ReactModal \n                          isOpen={this.state.showModal2}>\n                          <Appointment date={this.state.date} time={'10am'}/>\n                    </ReactModal>\n                    </td>\n                  </tr>\n\n                  <tr >\n                    \n                  <td onClick={()=> {this.toggleAvail(this.state.day[this.state.selectedDateI], \"availSlot3\"); this.handleOpenModal3(); }}\n                     className={this.state.selectedDateI > -1 && this.state.day[this.state.selectedDateI].availSlot3 ? null : 'notAvail' }>\n                      {\n                          (this.state.selectedDateI > -1 )\n                          ? (this.state.day[this.state.selectedDateI].availSlot3)\n                            ? \" 11am - available \"\n                            : \"time not available\"\n                          : \"refresh your page\"\n                      } \n                      <ReactModal \n                          isOpen={this.state.showModal3}>\n                          <Appointment date={this.state.date} time={'11am'}/>\n                      </ReactModal>\n                      </td>\n                  </tr>\n\n                  <tr >\n                    \n                  <td onClick={()=> {this.toggleAvail(this.state.day[this.state.selectedDateI], \"availSlot4\"); this.handleOpenModal4(); }}\n                     className={this.state.selectedDateI > -1 && this.state.day[this.state.selectedDateI].availSlot4 ? null : 'notAvail' }>\n                      {\n                          (this.state.selectedDateI > -1 )\n                          ? (this.state.day[this.state.selectedDateI].availSlot4)\n                            ? \" 1pm - available \"\n                            : \"time not available\"\n                          : \"refresh your page\"\n                      } \n                      <ReactModal \n                          isOpen={this.state.showModal4}>\n                          <Appointment date={this.state.date} time={'1pm'}/>\n                      </ReactModal>\n                      </td>\n                  </tr>\n\n                  <tr >\n                    \n                      <td onClick={()=> {this.toggleAvail(this.state.day[this.state.selectedDateI], \"availSlot5\"); this.handleOpenModal5(); }}\n                     className={this.state.selectedDateI > -1 && this.state.day[this.state.selectedDateI].availSlot5 ? null : 'notAvail' }>\n                      {\n                          (this.state.selectedDateI > -1 )\n                          ? (this.state.day[this.state.selectedDateI].availSlot5)\n                            ? \" 2pm - available \"\n                            : \"time not available\"\n                          : \"refresh your page\"\n                      } \n                      <ReactModal \n                          isOpen={this.state.showModal5}>\n                          <Appointment date={this.state.date} time={'2pm'}/>\n                      </ReactModal>\n                      </td>\n                  </tr>\n\n                  <tr >\n                    \n                  <td onClick={()=> {this.toggleAvail(this.state.day[this.state.selectedDateI], \"availSlot6\"); this.handleOpenModal6();}}\n                     className={this.state.selectedDateI > -1 && this.state.day[this.state.selectedDateI].availSlot6 ? null : 'notAvail' }>\n                      {\n                          (this.state.selectedDateI > -1 )\n                          ? (this.state.day[this.state.selectedDateI].availSlot6)\n                            ? \" 3pm - available \"\n                            : \"time not available\"\n                          : \"refresh your page\"\n                      } \n                      <ReactModal \n                          isOpen={this.state.showModal6}>\n                          <Appointment date={this.state.date} time={'3pm'}/>\n                      </ReactModal>\n                      </td>\n                    </tr>\n\n                  <tr >\n                    \n                    <td onClick={()=> {this.toggleAvail(this.state.day[this.state.selectedDateI], \"availSlot7\"); this.handleOpenModal7(); }}\n                      className={this.state.selectedDateI > -1 && this.state.day[this.state.selectedDateI].availSlot7 ? null : 'notAvail' }>\n                        {\n                            (this.state.selectedDateI > -1 )\n                            ? (this.state.day[this.state.selectedDateI].availSlot7)\n                              ? \" 4pm - available \"\n                              : \"time not available\"\n                            : \"refresh your page\"\n                        } \n                      <ReactModal \n                          isOpen={this.state.showModal7}>\n                          <Appointment date={this.state.date} time={'4pm'}/>\n                      </ReactModal>\n                      </td>\n                    </tr>\n\n                  <tr >\n                    \n                      <td onClick={()=> {this.toggleAvail(this.state.day[this.state.selectedDateI], \"availSlot8\"); this.handleOpenModal8(); }}\n                      className={this.state.selectedDateI > -1 && this.state.day[this.state.selectedDateI].availSlot8 ? null : 'notAvail' }>\n                      {\n                          (this.state.selectedDateI > -1 )\n                          ? (this.state.day[this.state.selectedDateI].availSlot8)\n                            ? \" 5pm - available \"\n                            : \"time not available\"\n                          : \"refresh your page\"\n                      }\n\n                      <ReactModal \n                        isOpen={this.state.showModal8}>\n                        <Appointment date={this.state.date} time={'5pm'}/>\n                      </ReactModal>\n                      </td>\n                    </tr>\n            </tbody>\n          \n\n           \n        </table>\n\n        </div>\n\n        \n        <div>\n          \n        </div>\n      </div>\n    );}\n}\n\n\n\n\n//<td onDoubleClick={() => this.toggleCelebrated(holiday)}\n//                             className={ holiday.celebrated ? 'celebrated' : null }>\n//                             { holiday.name }\n//                             </td>\n\n\n\n\n\n// <div>\n//             <table>\n//                 <tbody>\n//                     { \n//                     this.props.bookmarks.map((bookmark, i) => {\n//                         return (\n\n//                         <tr key={i}>\n//                            \n\n//                             <td> {availAppt.time} </td>\n                            \n//                             <td> {bookmark.description} </td>\n\n\n//                             <td onClick={() => this.props.deleteBookmark(bookmark._id)}>(DELETE)\n//                             </td> \n\n//                             <td onClick={() => {this.showEditForm(bookmark)} } onChange={this.handleChange}>  Show Edit Form\n                           \n//                             {\n//                                 this.state.modalOpen \n\n//                                 &&\n//                                 <div>\n//                                 <form onSubmit={(e)=>{ this.props.handleSubmit(e, bookmark._id, this.state.updatedTitle, this.state.updatedUrl, this.state.updatedDes)} }>\n\n//                                 <label>Title: </label>\n//                                 <input type='text' id='title' name=\"updatedTitle\"  onChange={this.handleChange} />\n\n//                                 <label>Description: </label>\n//                                 <input type='text' id='title' name=\"updatedDes\"  onChange={this.handleChange} />\n\n                            \n//                                 <label>Url: </label>\n//                                 <input type='text' id='title' name=\"updatedUrl\"  onChange={this.handleChange} />\n\n\n//                                 <input type=\"submit\" value=\"Edit\" />\n\n//                                 </form>\n//                                 </div>\n                                \n//                             }\n                            \n//                             </td>\n//                         </tr>\n                         \n//                     )})\n                    \n//                         }\n//                 </tbody>\n//             </table>\n//             <button onClick={this.closeModal} > Close Form</button>\n//         </div>","/Users/bpozniak/Desktop/UNIT3/project3/Project3_Calendar_FrontEnd/calendar/src/Appointment/index.js",["35"],{"ruleId":"36","severity":1,"message":"37","line":3,"column":8,"nodeType":"38","messageId":"39","endLine":3,"endColumn":16},{"ruleId":"36","severity":1,"message":"40","line":17,"column":5,"nodeType":"38","messageId":"39","endLine":17,"endColumn":12},{"ruleId":"36","severity":1,"message":"41","line":21,"column":7,"nodeType":"38","messageId":"39","endLine":21,"endColumn":12},{"ruleId":"42","severity":1,"message":"43","line":125,"column":11,"nodeType":"44","endLine":125,"endColumn":45},{"ruleId":"42","severity":1,"message":"43","line":127,"column":11,"nodeType":"44","endLine":127,"endColumn":44},{"ruleId":"36","severity":1,"message":"45","line":1,"column":17,"nodeType":"38","messageId":"39","endLine":1,"endColumn":26},{"ruleId":"36","severity":1,"message":"46","line":2,"column":8,"nodeType":"38","messageId":"39","endLine":2,"endColumn":14},{"ruleId":"36","severity":1,"message":"45","line":1,"column":17,"nodeType":"38","messageId":"39","endLine":1,"endColumn":26},"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'baseUrl' is assigned a value but never used.","'style' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Component' is defined but never used.","'moment' is defined but never used."]